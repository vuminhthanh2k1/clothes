swagger: '2.0'
info:
  version: 1.0.0
  title: plan-de-transport-api
  description: plan-de-transport-api
basePath: /api
paths:
  /Containers:
    get:
      tags:
        - Container
      operationId: Container.getContainers
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
    post:
      tags:
        - Container
      operationId: Container.createContainer
      parameters:
        - name: options
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}':
    delete:
      tags:
        - Container
      operationId: Container.destroyContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
    get:
      tags:
        - Container
      operationId: Container.getContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}/files':
    get:
      tags:
        - Container
      operationId: Container.getFiles
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Containers/{container}/files/{file}':
    get:
      tags:
        - Container
      operationId: Container.getFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    delete:
      tags:
        - Container
      operationId: Container.removeFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
  '/Containers/{container}/upload':
    post:
      tags:
        - Container
      operationId: Container.upload
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/Containers/{container}/download/{file}':
    get:
      tags:
        - Container
      operationId: Container.download
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/roles/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for roles.
      operationId: Account.prototype.__findById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for roles.
      operationId: Account.prototype.__destroyById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for roles.
      operationId: Account.prototype.__updateById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Accounts/{id}/roles/rel/{fk}':
    put:
      tags:
        - Account
      summary: Add a related item by id for roles.
      operationId: Account.prototype.__link__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Remove the roles relation to an item by id.
      operationId: Account.prototype.__unlink__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Account
      summary: Check the existence of roles relation to an item by id.
      operationId: Account.prototype.__exists__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Accounts/{id}/accessTokens/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for accessTokens.
      operationId: Account.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for accessTokens.
      operationId: Account.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for accessTokens.
      operationId: Account.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/Accounts/{id}/roles':
    get:
      tags:
        - Account
      summary: Queries roles of Account.
      operationId: Account.prototype.__get__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in roles of this model.
      operationId: Account.prototype.__create__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all roles of this model.
      operationId: Account.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/roles/count':
    get:
      tags:
        - Account
      summary: Counts roles of Account.
      operationId: Account.prototype.__count__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Accounts/{id}/accessTokens':
    get:
      tags:
        - Account
      summary: Queries accessTokens of Account.
      operationId: Account.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountToken'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in accessTokens of this model.
      operationId: Account.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all accessTokens of this model.
      operationId: Account.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/accessTokens/count':
    get:
      tags:
        - Account
      summary: Counts accessTokens of Account.
      operationId: Account.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts:
    post:
      tags:
        - Account
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Account.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Account.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__put_Accounts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    get:
      tags:
        - Account
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Account.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/replaceOrCreate:
    post:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__post_Accounts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/upsertWithWhere:
    post:
      tags:
        - Account
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Account.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/exists':
    get:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__get_Accounts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Accounts/{id}':
    head:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__head_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Account
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Account.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__put_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    delete:
      tags:
        - Account
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Account.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Account.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/replace':
    post:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__post_Accounts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/findOne:
    get:
      tags:
        - Account
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Account.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/update:
    post:
      tags:
        - Account
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Account.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Accounts/count:
    get:
      tags:
        - Account
      summary: Count instances of the model matched by where from the data source.
      operationId: Account.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts/change-stream:
    post:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__post_Accounts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__get_Accounts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Accounts/login:
    post:
      tags:
        - Account
      summary: Login a user with username/email and password.
      operationId: Account.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Accounts/logout:
    post:
      tags:
        - Account
      summary: Logout a user with access token.
      operationId: Account.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/verify':
    post:
      tags:
        - Account
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Account.prototype.verify
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/confirm:
    get:
      tags:
        - Account
      summary: Confirm a user registration with identity verification token.
      operationId: Account.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset:
    post:
      tags:
        - Account
      summary: Reset password for a user with email.
      operationId: Account.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/change-password:
    post:
      tags:
        - Account
      summary: Change a user's password.
      operationId: Account.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset-password:
    post:
      tags:
        - Account
      summary: Reset user's password via a password-reset token.
      operationId: Account.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/get-me:
    get:
      tags:
        - Account
      summary: Get account by token
      operationId: Account.getMe
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Accounts/change-role:
    post:
      tags:
        - Account
      summary: Change role of user
      operationId: Account.changeRole
      parameters:
        - name: data
          in: query
          description: context of request
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/x-any'
      deprecated: false
  '/AccountTokens/{id}/user':
    get:
      tags:
        - AccountToken
      summary: Fetches belongsTo relation user.
      operationId: AccountToken.prototype.__get__user
      parameters:
        - name: id
          in: path
          description: AccountToken id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /AccountTokens:
    post:
      tags:
        - AccountToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AccountToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    patch:
      tags:
        - AccountToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    put:
      tags:
        - AccountToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.replaceOrCreate__put_AccountTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AccountToken.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/replaceOrCreate:
    post:
      tags:
        - AccountToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.replaceOrCreate__post_AccountTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/upsertWithWhere:
    post:
      tags:
        - AccountToken
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: AccountToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/AccountTokens/{id}/exists':
    get:
      tags:
        - AccountToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccountToken.exists__get_AccountTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AccountTokens/{id}':
    head:
      tags:
        - AccountToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccountToken.exists__head_AccountTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AccountToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    put:
      tags:
        - AccountToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AccountToken.replaceById__put_AccountTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - AccountToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AccountToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AccountToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: AccountToken.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: AccountToken id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/AccountTokens/{id}/replace':
    post:
      tags:
        - AccountToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AccountToken.replaceById__post_AccountTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/findOne:
    get:
      tags:
        - AccountToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AccountToken.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/update:
    post:
      tags:
        - AccountToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AccountToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AccountTokens/count:
    get:
      tags:
        - AccountToken
      summary: Count instances of the model matched by where from the data source.
      operationId: AccountToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AccountTokens/change-stream:
    post:
      tags:
        - AccountToken
      summary: Create a change stream.
      operationId: AccountToken.createChangeStream__post_AccountTokens_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: Create a change stream.
      operationId: AccountToken.createChangeStream__get_AccountTokens_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Contacts:
    post:
      tags:
        - Contact
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Contact.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    patch:
      tags:
        - Contact
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Contact.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    put:
      tags:
        - Contact
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Contact.replaceOrCreate__put_Contacts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    get:
      tags:
        - Contact
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Contact.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/replaceOrCreate:
    post:
      tags:
        - Contact
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Contact.replaceOrCreate__post_Contacts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/upsertWithWhere:
    post:
      tags:
        - Contact
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Contact.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  '/Contacts/{id}/exists':
    get:
      tags:
        - Contact
      summary: Check whether a model instance exists in the data source.
      operationId: 'Contact.exists__get_Contacts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Contacts/{id}':
    head:
      tags:
        - Contact
      summary: Check whether a model instance exists in the data source.
      operationId: 'Contact.exists__head_Contacts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Contact
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Contact.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    put:
      tags:
        - Contact
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Contact.replaceById__put_Contacts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    delete:
      tags:
        - Contact
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Contact.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Contact
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Contact.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Contact id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  '/Contacts/{id}/replace':
    post:
      tags:
        - Contact
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Contact.replaceById__post_Contacts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/findOne:
    get:
      tags:
        - Contact
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Contact.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/update:
    post:
      tags:
        - Contact
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Contact.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Contacts/count:
    get:
      tags:
        - Contact
      summary: Count instances of the model matched by where from the data source.
      operationId: Contact.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Contacts/change-stream:
    post:
      tags:
        - Contact
      summary: Create a change stream.
      operationId: Contact.createChangeStream__post_Contacts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Contact
      summary: Create a change stream.
      operationId: Contact.createChangeStream__get_Contacts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Tags:
    post:
      tags:
        - Tag
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Tag.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    patch:
      tags:
        - Tag
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Tag.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    put:
      tags:
        - Tag
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Tag.replaceOrCreate__put_Tags
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    get:
      tags:
        - Tag
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Tag.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
      deprecated: false
  /Tags/replaceOrCreate:
    post:
      tags:
        - Tag
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Tag.replaceOrCreate__post_Tags_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  /Tags/upsertWithWhere:
    post:
      tags:
        - Tag
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Tag.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  '/Tags/{id}/exists':
    get:
      tags:
        - Tag
      summary: Check whether a model instance exists in the data source.
      operationId: 'Tag.exists__get_Tags_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Tags/{id}':
    head:
      tags:
        - Tag
      summary: Check whether a model instance exists in the data source.
      operationId: 'Tag.exists__head_Tags_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Tag
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Tag.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    put:
      tags:
        - Tag
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Tag.replaceById__put_Tags_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    delete:
      tags:
        - Tag
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Tag.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Tag
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Tag.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Tag id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  '/Tags/{id}/replace':
    post:
      tags:
        - Tag
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Tag.replaceById__post_Tags_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  /Tags/findOne:
    get:
      tags:
        - Tag
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Tag.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  /Tags/update:
    post:
      tags:
        - Tag
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Tag.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Tags/count:
    get:
      tags:
        - Tag
      summary: Count instances of the model matched by where from the data source.
      operationId: Tag.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Tags/change-stream:
    post:
      tags:
        - Tag
      summary: Create a change stream.
      operationId: Tag.createChangeStream__post_Tags_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Tag
      summary: Create a change stream.
      operationId: Tag.createChangeStream__get_Tags_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Blogs/{id}/account':
    get:
      tags:
        - Blog
      summary: Fetches belongsTo relation account.
      operationId: Blog.prototype.__get__account
      parameters:
        - name: id
          in: path
          description: Blog id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Blogs/{id}/tag':
    get:
      tags:
        - Blog
      summary: Fetches belongsTo relation tag.
      operationId: Blog.prototype.__get__tag
      parameters:
        - name: id
          in: path
          description: Blog id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
  /Blogs:
    post:
      tags:
        - Blog
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Blog.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
    patch:
      tags:
        - Blog
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Blog.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
    put:
      tags:
        - Blog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Blog.replaceOrCreate__put_Blogs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
    get:
      tags:
        - Blog
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Blog.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Blog'
      deprecated: false
  /Blogs/replaceOrCreate:
    post:
      tags:
        - Blog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Blog.replaceOrCreate__post_Blogs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
  /Blogs/upsertWithWhere:
    post:
      tags:
        - Blog
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Blog.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
  '/Blogs/{id}/exists':
    get:
      tags:
        - Blog
      summary: Check whether a model instance exists in the data source.
      operationId: 'Blog.exists__get_Blogs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Blogs/{id}':
    head:
      tags:
        - Blog
      summary: Check whether a model instance exists in the data source.
      operationId: 'Blog.exists__head_Blogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Blog
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Blog.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
    put:
      tags:
        - Blog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Blog.replaceById__put_Blogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
    delete:
      tags:
        - Blog
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Blog.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Blog
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Blog.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Blog id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
  '/Blogs/{id}/replace':
    post:
      tags:
        - Blog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Blog.replaceById__post_Blogs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
  /Blogs/findOne:
    get:
      tags:
        - Blog
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Blog.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Blog'
      deprecated: false
  /Blogs/update:
    post:
      tags:
        - Blog
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Blog.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Blog'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Blogs/count:
    get:
      tags:
        - Blog
      summary: Count instances of the model matched by where from the data source.
      operationId: Blog.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Blogs/change-stream:
    post:
      tags:
        - Blog
      summary: Create a change stream.
      operationId: Blog.createChangeStream__post_Blogs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Blog
      summary: Create a change stream.
      operationId: Blog.createChangeStream__get_Blogs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Feedbacks/{id}/account':
    get:
      tags:
        - Feedback
      summary: Fetches belongsTo relation account.
      operationId: Feedback.prototype.__get__account
      parameters:
        - name: id
          in: path
          description: Feedback id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Feedbacks:
    post:
      tags:
        - Feedback
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Feedback.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    patch:
      tags:
        - Feedback
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Feedback.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    put:
      tags:
        - Feedback
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Feedback.replaceOrCreate__put_Feedbacks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    get:
      tags:
        - Feedback
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Feedback.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/replaceOrCreate:
    post:
      tags:
        - Feedback
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Feedback.replaceOrCreate__post_Feedbacks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/upsertWithWhere:
    post:
      tags:
        - Feedback
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Feedback.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  '/Feedbacks/{id}/exists':
    get:
      tags:
        - Feedback
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feedback.exists__get_Feedbacks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Feedbacks/{id}':
    head:
      tags:
        - Feedback
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feedback.exists__head_Feedbacks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Feedback
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Feedback.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    put:
      tags:
        - Feedback
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Feedback.replaceById__put_Feedbacks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    delete:
      tags:
        - Feedback
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Feedback.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Feedback
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Feedback.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Feedback id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  '/Feedbacks/{id}/replace':
    post:
      tags:
        - Feedback
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Feedback.replaceById__post_Feedbacks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/findOne:
    get:
      tags:
        - Feedback
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Feedback.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/update:
    post:
      tags:
        - Feedback
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Feedback.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Feedbacks/count:
    get:
      tags:
        - Feedback
      summary: Count instances of the model matched by where from the data source.
      operationId: Feedback.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Feedbacks/change-stream:
    post:
      tags:
        - Feedback
      summary: Create a change stream.
      operationId: Feedback.createChangeStream__post_Feedbacks_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Feedback
      summary: Create a change stream.
      operationId: Feedback.createChangeStream__get_Feedbacks_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /CategoryProducts:
    post:
      tags:
        - CategoryProduct
      summary: Create a new instance of the model and persist it into the data source.
      operationId: CategoryProduct.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
    patch:
      tags:
        - CategoryProduct
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: CategoryProduct.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
    put:
      tags:
        - CategoryProduct
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CategoryProduct.replaceOrCreate__put_CategoryProducts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
    get:
      tags:
        - CategoryProduct
      summary: Find all instances of the model matched by filter from the data source.
      operationId: CategoryProduct.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CategoryProduct'
      deprecated: false
  /CategoryProducts/replaceOrCreate:
    post:
      tags:
        - CategoryProduct
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CategoryProduct.replaceOrCreate__post_CategoryProducts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  /CategoryProducts/upsertWithWhere:
    post:
      tags:
        - CategoryProduct
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: CategoryProduct.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  '/CategoryProducts/{id}/exists':
    get:
      tags:
        - CategoryProduct
      summary: Check whether a model instance exists in the data source.
      operationId: 'CategoryProduct.exists__get_CategoryProducts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/CategoryProducts/{id}':
    head:
      tags:
        - CategoryProduct
      summary: Check whether a model instance exists in the data source.
      operationId: 'CategoryProduct.exists__head_CategoryProducts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - CategoryProduct
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: CategoryProduct.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
    put:
      tags:
        - CategoryProduct
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'CategoryProduct.replaceById__put_CategoryProducts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
    delete:
      tags:
        - CategoryProduct
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: CategoryProduct.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - CategoryProduct
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: CategoryProduct.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: CategoryProduct id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  '/CategoryProducts/{id}/replace':
    post:
      tags:
        - CategoryProduct
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'CategoryProduct.replaceById__post_CategoryProducts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  /CategoryProducts/findOne:
    get:
      tags:
        - CategoryProduct
      summary: Find first instance of the model matched by filter from the data source.
      operationId: CategoryProduct.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  /CategoryProducts/update:
    post:
      tags:
        - CategoryProduct
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: CategoryProduct.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CategoryProduct'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /CategoryProducts/count:
    get:
      tags:
        - CategoryProduct
      summary: Count instances of the model matched by where from the data source.
      operationId: CategoryProduct.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /CategoryProducts/change-stream:
    post:
      tags:
        - CategoryProduct
      summary: Create a change stream.
      operationId: CategoryProduct.createChangeStream__post_CategoryProducts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - CategoryProduct
      summary: Create a change stream.
      operationId: CategoryProduct.createChangeStream__get_CategoryProducts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Carts/{id}/account':
    get:
      tags:
        - Cart
      summary: Fetches belongsTo relation account.
      operationId: Cart.prototype.__get__account
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Carts/{id}/clothes/{fk}':
    get:
      tags:
        - Cart
      summary: Find a related item by id for clothes.
      operationId: Cart.prototype.__findById__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    delete:
      tags:
        - Cart
      summary: Delete a related item by id for clothes.
      operationId: Cart.prototype.__destroyById__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Cart
      summary: Update a related item by id for clothes.
      operationId: Cart.prototype.__updateById__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  '/Carts/{id}/clothes/rel/{fk}':
    put:
      tags:
        - Cart
      summary: Add a related item by id for clothes.
      operationId: Cart.prototype.__link__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    delete:
      tags:
        - Cart
      summary: Remove the clothes relation to an item by id.
      operationId: Cart.prototype.__unlink__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Cart
      summary: Check the existence of clothes relation to an item by id.
      operationId: Cart.prototype.__exists__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for clothes
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Carts/{id}/clothes':
    get:
      tags:
        - Cart
      summary: Queries clothes of Cart.
      operationId: Cart.prototype.__get__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Clothes'
      deprecated: false
    post:
      tags:
        - Cart
      summary: Creates a new instance in clothes of this model.
      operationId: Cart.prototype.__create__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    delete:
      tags:
        - Cart
      summary: Deletes all clothes of this model.
      operationId: Cart.prototype.__delete__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Carts/{id}/clothes/count':
    get:
      tags:
        - Cart
      summary: Counts clothes of Cart.
      operationId: Cart.prototype.__count__clothes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Carts:
    post:
      tags:
        - Cart
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Cart.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    patch:
      tags:
        - Cart
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Cart.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    put:
      tags:
        - Cart
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Cart.replaceOrCreate__put_Carts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    get:
      tags:
        - Cart
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Cart.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
      deprecated: false
  /Carts/replaceOrCreate:
    post:
      tags:
        - Cart
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Cart.replaceOrCreate__post_Carts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  /Carts/upsertWithWhere:
    post:
      tags:
        - Cart
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Cart.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  '/Carts/{id}/exists':
    get:
      tags:
        - Cart
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cart.exists__get_Carts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Carts/{id}':
    head:
      tags:
        - Cart
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cart.exists__head_Carts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Cart
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Cart.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    put:
      tags:
        - Cart
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Cart.replaceById__put_Carts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    delete:
      tags:
        - Cart
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Cart.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Cart
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Cart.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Cart id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  '/Carts/{id}/replace':
    post:
      tags:
        - Cart
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Cart.replaceById__post_Carts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  /Carts/findOne:
    get:
      tags:
        - Cart
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Cart.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  /Carts/update:
    post:
      tags:
        - Cart
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Cart.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Carts/count:
    get:
      tags:
        - Cart
      summary: Count instances of the model matched by where from the data source.
      operationId: Cart.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Carts/change-stream:
    post:
      tags:
        - Cart
      summary: Create a change stream.
      operationId: Cart.createChangeStream__post_Carts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Cart
      summary: Create a change stream.
      operationId: Cart.createChangeStream__get_Carts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Carts/add-to-cart:
    post:
      tags:
        - Cart
      summary: check order by account token and product
      operationId: Cart.addToCart
      parameters:
        - name: product
          in: query
          description: product
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
      deprecated: false
  /Carts/statistic-amount:
    get:
      tags:
        - Cart
      summary: statistic order by year
      operationId: Cart.statisticByAmount
      parameters:
        - name: year
          in: query
          description: year
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/x-any'
      deprecated: false
  /Carts/statistic-revenue:
    get:
      tags:
        - Cart
      summary: statistic order by year
      operationId: Cart.statisticByRevenue
      parameters:
        - name: year
          in: query
          description: year
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/x-any'
      deprecated: false
  /Carts/payment-order:
    post:
      tags:
        - Cart
      summary: payment online
      operationId: Cart.paymentOrder
      parameters:
        - name: data
          in: body
          description: information payment
          required: true
          schema:
            description: information payment
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
      deprecated: false
  /Carts/changeAmount:
    get:
      tags:
        - Cart
      summary: change Amount
      operationId: Cart.changeAmount
      parameters:
        - name: cartId
          in: query
          description: change Amount
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/x-any'
      deprecated: false
  '/Clothes/{id}/categoryProduct':
    get:
      tags:
        - Clothes
      summary: Fetches belongsTo relation categoryProduct.
      operationId: Clothes.prototype.__get__categoryProduct
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CategoryProduct'
      deprecated: false
  '/Clothes/{id}/cart/{fk}':
    get:
      tags:
        - Clothes
      summary: Find a related item by id for cart.
      operationId: Clothes.prototype.__findById__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    delete:
      tags:
        - Clothes
      summary: Delete a related item by id for cart.
      operationId: Clothes.prototype.__destroyById__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Clothes
      summary: Update a related item by id for cart.
      operationId: Clothes.prototype.__updateById__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  '/Clothes/{id}/cart/rel/{fk}':
    put:
      tags:
        - Clothes
      summary: Add a related item by id for cart.
      operationId: Clothes.prototype.__link__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    delete:
      tags:
        - Clothes
      summary: Remove the cart relation to an item by id.
      operationId: Clothes.prototype.__unlink__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Clothes
      summary: Check the existence of cart relation to an item by id.
      operationId: Clothes.prototype.__exists__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for cart
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Clothes/{id}/cart':
    get:
      tags:
        - Clothes
      summary: Queries cart of Clothes.
      operationId: Clothes.prototype.__get__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
      deprecated: false
    post:
      tags:
        - Clothes
      summary: Creates a new instance in cart of this model.
      operationId: Clothes.prototype.__create__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
    delete:
      tags:
        - Clothes
      summary: Deletes all cart of this model.
      operationId: Clothes.prototype.__delete__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Clothes/{id}/cart/count':
    get:
      tags:
        - Clothes
      summary: Counts cart of Clothes.
      operationId: Clothes.prototype.__count__cart
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clothes:
    post:
      tags:
        - Clothes
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Clothes.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    patch:
      tags:
        - Clothes
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Clothes.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    put:
      tags:
        - Clothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Clothes.replaceOrCreate__put_Clothes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    get:
      tags:
        - Clothes
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Clothes.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Clothes'
      deprecated: false
  /Clothes/replaceOrCreate:
    post:
      tags:
        - Clothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Clothes.replaceOrCreate__post_Clothes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  /Clothes/upsertWithWhere:
    post:
      tags:
        - Clothes
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Clothes.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  '/Clothes/{id}/exists':
    get:
      tags:
        - Clothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'Clothes.exists__get_Clothes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Clothes/{id}':
    head:
      tags:
        - Clothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'Clothes.exists__head_Clothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Clothes
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Clothes.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    put:
      tags:
        - Clothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Clothes.replaceById__put_Clothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
    delete:
      tags:
        - Clothes
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Clothes.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Clothes
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Clothes.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Clothes id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  '/Clothes/{id}/replace':
    post:
      tags:
        - Clothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Clothes.replaceById__post_Clothes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  /Clothes/findOne:
    get:
      tags:
        - Clothes
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Clothes.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  /Clothes/update:
    post:
      tags:
        - Clothes
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Clothes.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clothes'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Clothes/count:
    get:
      tags:
        - Clothes
      summary: Count instances of the model matched by where from the data source.
      operationId: Clothes.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clothes/change-stream:
    post:
      tags:
        - Clothes
      summary: Create a change stream.
      operationId: Clothes.createChangeStream__post_Clothes_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Clothes
      summary: Create a change stream.
      operationId: Clothes.createChangeStream__get_Clothes_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/CartClothes/{id}/cart':
    get:
      tags:
        - CartClothes
      summary: Fetches belongsTo relation cart.
      operationId: CartClothes.prototype.__get__cart
      parameters:
        - name: id
          in: path
          description: CartClothes id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cart'
      deprecated: false
  '/CartClothes/{id}/clothes':
    get:
      tags:
        - CartClothes
      summary: Fetches belongsTo relation clothes.
      operationId: CartClothes.prototype.__get__clothes
      parameters:
        - name: id
          in: path
          description: CartClothes id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  /CartClothes:
    post:
      tags:
        - CartClothes
      summary: Create a new instance of the model and persist it into the data source.
      operationId: CartClothes.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    patch:
      tags:
        - CartClothes
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: CartClothes.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    put:
      tags:
        - CartClothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CartClothes.replaceOrCreate__put_CartClothes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    get:
      tags:
        - CartClothes
      summary: Find all instances of the model matched by filter from the data source.
      operationId: CartClothes.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CartClothes'
      deprecated: false
  /CartClothes/replaceOrCreate:
    post:
      tags:
        - CartClothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CartClothes.replaceOrCreate__post_CartClothes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
  /CartClothes/upsertWithWhere:
    post:
      tags:
        - CartClothes
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: CartClothes.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
  '/CartClothes/{id}/exists':
    get:
      tags:
        - CartClothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'CartClothes.exists__get_CartClothes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/CartClothes/{id}':
    head:
      tags:
        - CartClothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'CartClothes.exists__head_CartClothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - CartClothes
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: CartClothes.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    put:
      tags:
        - CartClothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'CartClothes.replaceById__put_CartClothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
    delete:
      tags:
        - CartClothes
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: CartClothes.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - CartClothes
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: CartClothes.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: CartClothes id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
  '/CartClothes/{id}/replace':
    post:
      tags:
        - CartClothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'CartClothes.replaceById__post_CartClothes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
  /CartClothes/findOne:
    get:
      tags:
        - CartClothes
      summary: Find first instance of the model matched by filter from the data source.
      operationId: CartClothes.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CartClothes'
      deprecated: false
  /CartClothes/update:
    post:
      tags:
        - CartClothes
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: CartClothes.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CartClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /CartClothes/count:
    get:
      tags:
        - CartClothes
      summary: Count instances of the model matched by where from the data source.
      operationId: CartClothes.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /CartClothes/change-stream:
    post:
      tags:
        - CartClothes
      summary: Create a change stream.
      operationId: CartClothes.createChangeStream__post_CartClothes_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - CartClothes
      summary: Create a change stream.
      operationId: CartClothes.createChangeStream__get_CartClothes_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /CartClothes/get-order-cart:
    get:
      tags:
        - CartClothes
      summary: Get order product in cart by token
      operationId: CartClothes.getOrder
      parameters:
        - name: user
          in: query
          description: userId
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/FavorisClothes/{id}/account':
    get:
      tags:
        - FavorisClothes
      summary: Fetches belongsTo relation account.
      operationId: FavorisClothes.prototype.__get__account
      parameters:
        - name: id
          in: path
          description: FavorisClothes id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/FavorisClothes/{id}/clothes':
    get:
      tags:
        - FavorisClothes
      summary: Fetches belongsTo relation clothes.
      operationId: FavorisClothes.prototype.__get__clothes
      parameters:
        - name: id
          in: path
          description: FavorisClothes id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clothes'
      deprecated: false
  /FavorisClothes:
    post:
      tags:
        - FavorisClothes
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FavorisClothes.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
    patch:
      tags:
        - FavorisClothes
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: FavorisClothes.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
    put:
      tags:
        - FavorisClothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FavorisClothes.replaceOrCreate__put_FavorisClothes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
    get:
      tags:
        - FavorisClothes
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FavorisClothes.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FavorisClothes'
      deprecated: false
  /FavorisClothes/replaceOrCreate:
    post:
      tags:
        - FavorisClothes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FavorisClothes.replaceOrCreate__post_FavorisClothes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
  /FavorisClothes/upsertWithWhere:
    post:
      tags:
        - FavorisClothes
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: FavorisClothes.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
  '/FavorisClothes/{id}/exists':
    get:
      tags:
        - FavorisClothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'FavorisClothes.exists__get_FavorisClothes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FavorisClothes/{id}':
    head:
      tags:
        - FavorisClothes
      summary: Check whether a model instance exists in the data source.
      operationId: 'FavorisClothes.exists__head_FavorisClothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FavorisClothes
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FavorisClothes.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
    put:
      tags:
        - FavorisClothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FavorisClothes.replaceById__put_FavorisClothes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
    delete:
      tags:
        - FavorisClothes
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FavorisClothes.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FavorisClothes
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: FavorisClothes.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: FavorisClothes id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
  '/FavorisClothes/{id}/replace':
    post:
      tags:
        - FavorisClothes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FavorisClothes.replaceById__post_FavorisClothes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
  /FavorisClothes/findOne:
    get:
      tags:
        - FavorisClothes
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FavorisClothes.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FavorisClothes'
      deprecated: false
  /FavorisClothes/update:
    post:
      tags:
        - FavorisClothes
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FavorisClothes.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FavorisClothes'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FavorisClothes/count:
    get:
      tags:
        - FavorisClothes
      summary: Count instances of the model matched by where from the data source.
      operationId: FavorisClothes.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FavorisClothes/change-stream:
    post:
      tags:
        - FavorisClothes
      summary: Create a change stream.
      operationId: FavorisClothes.createChangeStream__post_FavorisClothes_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - FavorisClothes
      summary: Create a change stream.
      operationId: FavorisClothes.createChangeStream__get_FavorisClothes_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: Container
  - name: Account
  - name: AccountToken
  - name: Contact
  - name: Tag
  - name: Blog
  - name: Feedback
  - name: CategoryProduct
  - name: Cart
  - name: Clothes
  - name: CartClothes
  - name: FavorisClothes
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  Role:
    properties:
      id:
        type: number
        format: double
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: number
        format: double
      principalType:
        description: >-
          The principal type, such as USER, APPLICATION, ROLE, or user model
          name in case of multiple user models
        type: string
      principalId:
        type: string
      roleId:
        type: number
        format: double
    additionalProperties: false
  AccountToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - id
    additionalProperties: false
  Account:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      avatar:
        type: string
      city:
        type: number
        format: double
      district:
        type: number
        format: double
      phoneNumber:
        type: number
        format: double
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - email
    additionalProperties: false
  Contact:
    properties:
      name:
        type: string
      email:
        type: string
      subject:
        type: string
      message:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Tag:
    properties:
      title:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Blog:
    properties:
      title:
        type: string
      metaDescription:
        type: string
      content:
        type: string
      photoURL:
        type: string
      id:
        type: number
        format: double
      accountId:
        type: number
        format: double
      tagId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Feedback:
    properties:
      content:
        type: string
      id:
        type: number
        format: double
      accountId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  CategoryProduct:
    properties:
      title:
        type: string
      photoURL:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Clothes:
    properties:
      title:
        type: string
      price:
        type: number
        format: double
      size:
        type: string
      amount:
        type: number
        format: double
      type:
        type: string
      photoURL:
        type: string
      content:
        type: string
      metaDescription:
        type: string
      record:
        type: number
        format: double
      id:
        type: number
        format: double
      categoryProductId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  CartClothes:
    properties:
      amount:
        type: number
        format: double
      price:
        type: number
        format: double
      id:
        type: number
        format: double
      cartId:
        type: number
        format: double
      clothesId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Cart:
    properties:
      code:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: number
        format: double
      email:
        type: string
      address:
        type: string
      city:
        type: number
        format: double
      district:
        type: number
        format: double
      note:
        type: string
      status:
        type: string
      price:
        type: number
        format: double
      id:
        type: number
        format: double
      accountId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  FavorisClothes:
    properties:
      id:
        type: number
        format: double
      accountId:
        type: number
        format: double
      clothesId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
